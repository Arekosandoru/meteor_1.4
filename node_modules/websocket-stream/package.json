{
  "_args": [
    [
      {
        "raw": "websocket-stream@~0.5.1",
        "scope": null,
        "escapedName": "websocket-stream",
        "name": "websocket-stream",
        "rawSpec": "~0.5.1",
        "spec": ">=0.5.1 <0.6.0",
        "type": "range"
      },
      "/samba/secured/meteor_1.5/node_modules/reconnect-ws"
    ]
  ],
  "_from": "websocket-stream@>=0.5.1 <0.6.0",
  "_id": "websocket-stream@0.5.1",
  "_inCache": true,
  "_location": "/websocket-stream",
  "_npmUser": {
    "name": "maxogden",
    "email": "max@maxogden.com"
  },
  "_npmVersion": "1.4.3",
  "_phantomChildren": {},
  "_requested": {
    "raw": "websocket-stream@~0.5.1",
    "scope": null,
    "escapedName": "websocket-stream",
    "name": "websocket-stream",
    "rawSpec": "~0.5.1",
    "spec": ">=0.5.1 <0.6.0",
    "type": "range"
  },
  "_requiredBy": [
    "/reconnect-ws"
  ],
  "_resolved": "https://registry.npmjs.org/websocket-stream/-/websocket-stream-0.5.1.tgz",
  "_shasum": "622cd1f0566fb84ce0a4d6f854526f3dc4d70e48",
  "_shrinkwrap": null,
  "_spec": "websocket-stream@~0.5.1",
  "_where": "/samba/secured/meteor_1.5/node_modules/reconnect-ws",
  "browser": {
    "./echo-server.js": "./fake-server.js"
  },
  "bugs": {
    "url": "https://github.com/maxogden/websocket-stream/issues"
  },
  "dependencies": {
    "isbuffer": "0.0.0",
    "through": "~2.3.4",
    "ws": "~0.4.30"
  },
  "description": "websockets with the node stream api. works in browser and node",
  "devDependencies": {
    "browserify": "2.14.1",
    "ecstatic": "0.4.2",
    "el-streamo": "1.0.0",
    "stringstream": "0.0.4",
    "tape": "~1.0.4"
  },
  "directories": {},
  "dist": {
    "shasum": "622cd1f0566fb84ce0a4d6f854526f3dc4d70e48",
    "tarball": "https://registry.npmjs.org/websocket-stream/-/websocket-stream-0.5.1.tgz"
  },
  "engines": {
    "node": ">=0.8"
  },
  "homepage": "https://github.com/maxogden/websocket-stream#readme",
  "keywords": [
    "websocket",
    "websockets",
    "stream",
    "streams",
    "realtime"
  ],
  "maintainers": [
    {
      "name": "maxogden",
      "email": "max@maxogden.com"
    }
  ],
  "name": "websocket-stream",
  "optionalDependencies": {},
  "readme": "# websocket-stream\n\n    npm install websocket-stream\n\nuse HTML5 [websockets](https://developer.mozilla.org/en-US/docs/WebSockets) the node way -- with streams\n\n# in the browser\n\nyou can use [browserify](http://github.com/substack/node-browserify) to package this module for browser use.\n\n```javascript\nvar websocket = require('websocket-stream')\nvar ws = websocket('ws://realtimecats.com')\nws.pipe(somewhereAwesome)\n```\n\n`ws` is a stream and speaks stream events: `data`, `error` and `end`. that means you can pipe output to anything that accepts streams. you can also pipe data into streams (such as a webcam feed or audio data)\n\n### browserify steps\n```javascript\nnpm install -g browserify // install browserify\ncd node_modules/websocket-stream\nnpm install . // install dev dependencies\nbrowserify index.js -s websocket-stream > websocket-stream.js // require websocket-stream.js in your client-side app\n```\n\n# on the server\n\nusing the [`ws`](http://npmjs.org/ws) module you can make a websocket server and use this module to get websocket streams on the server:\n\n```javascript\nvar WebSocketServer = require('ws').Server\nvar websocket = require('websocket-stream')\nvar wss = new WebSocketServer({server: someHTTPServer})\nwss.on('connection', function(ws) {\n  var stream = websocket(ws)\n  fs.createReadStream('bigdata.json').pipe(stream)\n})\n```\n\n## options\n\npass in options as the second argument like this:\n\n```js\nwebsocketStream('ws://foobar', { type: someTypedArray })\n\n// e.g. {type: Uint8Array} means you'll get Uint8Arrays back instead of ArrayBuffers\n```\n\npossible options are...\n\n```js\n{ \n  protocol: // optional, string, specify websocket protocol\n  type: // optional, TypedArray object, wraps the ArrayBuffer before emitting\n}\n```\n\n### binary sockets\n\nTo send binary data just write a [Buffer](nodejs.org/api/buffer.html) or [TypedArray](https://developer.mozilla.org/en-US/docs/JavaScript/Typed_arrays) to the stream.\nOn the other end you will receive [Buffer](nodejs.org/api/buffer.html) instances if it's the server and [ArrayBuffer](https://developer.mozilla.org/en-US/docs/JavaScript/Typed_arrays/ArrayBuffer) instances if it's the client. The client will default to `ArrayBuffer` objects but can also be configured to receive `Blob`s.\n\nIf you write binary data to a websocket on the server, the client will receive binary objects. Same thing goes for strings. \n\n## license\n\nBSD LICENSE\n",
  "readmeFilename": "readme.md",
  "repository": {
    "type": "git",
    "url": "git+ssh://git@github.com/maxogden/websocket-stream.git"
  },
  "scripts": {
    "echo": "node echo-server.js",
    "start": "browserify demo.js -o demo-bundle.js && node demo-server.js",
    "test": "node test.js"
  },
  "testling": {
    "files": "test.js",
    "server": "node echo-server.js",
    "browsers": [
      "ie/6..latest",
      "chrome/20..latest",
      "firefox/10..latest",
      "safari/latest",
      "opera/11.0..latest",
      "iphone/6",
      "ipad/6"
    ]
  },
  "version": "0.5.1"
}
